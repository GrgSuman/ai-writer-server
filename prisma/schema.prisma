// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id              String  @id @default(uuid())  // Unique ID
  name            String  // User Name
  email           String @unique  // User Email
  profile_url     String?  // User Profile URL
  role            String @default("user")  // role will be user by default or admin if set
  createdAt       DateTime @default(now()) // Timestamp for creation

  projects        Project[] // Relation to Projects
  apiKey          APIKey?    // Relation to APIKey
}

model APIKey {
  id              String  @id @default(uuid())  // Unique ID
  key             String  // API Key
  createdAt       DateTime @default(now()) // Timestamp for creation
  isActive        Boolean @default(true)
  totalRequests   Int @default(0)
  user            User  @relation(fields: [userId], references: [id])
  userId          String @unique
}

model Project {
  id              String  @id @default(uuid())  // Unique ID
  name            String  // Project Name
  description     String? // Project Description (optional)
  systemPrompt    String?  // System Prompt for the Project
  isActive        Boolean @default(true) // Active status
  gradientStart   String? //card color for project listings
  gradientEnd     String? //card color gradiend (they will be set automatically)

  posts           Post[] // Relation to Posts
  categorys       Category[] // Relation to Category

  createdAt       DateTime @default(now()) // Timestamp for creation
  updatedAt       DateTime @updatedAt      // Auto-updated on modification

  userId        String @default("admin")
  user          User     @relation(fields: [userId], references: [id])
}

model Category{
  id              String  @id @default(uuid())  // Unique ID
  name            String  // Category Name
  slug            String  // Category Slug
  projectId       String  // Foreign key to Project
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  posts           Post[]  // Relation to Posts

  @@unique([projectId, name]) // Category name must be unique within a project
  @@unique([projectId, slug]) // Category slug must be unique within a project
}

model Post {
  id          String   @id @default(uuid())  // Unique ID
  title       String   // Post title
  slug        String   // Category Slug
  description String // Post description 
  keywords    String // list of keywords
  content     String   // Post content
  thumbnail   String?  // Thumbnail image URL (optional)
  author      String?  // author is (optional)
  isDraft     Boolean  @default(true)
  isUpdated   Boolean  @default(false)
  isFeatured  Boolean  @default(false)

  categoryId  String   // Category of the post
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  projectId   String   // Foreign key to Project
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now()) // Timestamp for creation
  updatedAt   DateTime @updatedAt      // Auto-updated on modification

  @@unique([projectId, title]) // Post titles must be unique within a project
  @@unique([projectId, slug]) // Post slug must be unique within a project
}

