generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  profile_url String?
  role        String    @default("user")
  createdAt   DateTime  @default(now())
  apiKey      APIKey?
  projects    Project[]
}

model APIKey {
  id            String   @id @default(uuid())
  key           String
  createdAt     DateTime @default(now())
  isActive      Boolean  @default(true)
  totalRequests Int      @default(0)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
}

model Project {
  id                   String                 @id @default(uuid())
  name                 String
  description          String?
  systemPrompt         String?
  isActive             Boolean                @default(true)
  gradientStart        String?
  gradientEnd          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               String
  emoji                String?
  categorys            Category[]
  posts                Post[]
  user                 User                   @relation(fields: [userId], references: [id])
  researchContentIdeas ResearchContentIdeas[]

  @@unique([userId, name])
}

model Category {
  id        String  @id @default(uuid())
  name      String
  slug      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  posts     Post[]

  @@unique([projectId, name])
  @@unique([projectId, slug])
}

model Post {
  id          String   @id @default(uuid())
  title       String
  slug        String
  description String
  keywords    String
  content     String
  thumbnail   String?
  author      String?
  isDraft     Boolean  @default(true)
  isUpdated   Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  categoryId  String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, title])
  @@unique([projectId, slug])
}

model ResearchContentIdeas {
  id                String   @id @default(uuid())
  title             String
  description       String
  projectId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  audience          String
  length            String
  searchIntent      String
  suggestedCategory String
  tone              String
  trendInsights     String
  keywords          String[]
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, title])
}
